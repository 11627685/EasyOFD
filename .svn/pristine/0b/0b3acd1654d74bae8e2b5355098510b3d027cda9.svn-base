
import SingedInfo from "./SingedInfo.js"



export default class Signature {
    constructor(docs) {
        this.docs = docs;
        /* 签名或签章的标识*/
        this.id = '';
        /* 签名节点的类型，目前规定了两个可选值，Scal表示是安全签章，Sign
       表示是纯数字签名*/
        this.type = '';

        /* 指向包内的签名描述文件*/
        this.baseLoc = '';


        this.singedInfo = new SingedInfo(this.docs);

        /* 地址
        签名值指向包内的一个二进制文件,该文件存放数字签名或签章结果。
        该值需满足的密码安全要求在其他规范中限定。*/
        this.signedValue = '';

        // this.seal = null;

    }

    ParseFromXml(xml) {
        if (xml._ID != null)
            this.id = xml._ID.toString();

        if (xml._Type != null)
            this.type = xml._Type.toString();

        if (xml._BaseLoc != null) {

            this.baseLoc = xml._BaseLoc.toString();
            let signxml = this.docs.get('Signs/' + this.baseLoc).Signature;

            if (signxml.SignedValue != null) {
                this.signedValue = signxml.SignedValue.toString();
                // this.signedate = this.docs.get('Signs/' + this.baseLoc.replace('Signature.xml', this.signedValue));
                // this.seal=new Seal();
                // this.seal.Parse(this.signedate);
                // console.log('aaaaaaaaaaaa')
            }

            if (signxml.SignedInfo != null)
                this.singedInfo.ParseFromXml(signxml.SignedInfo, this.baseLoc);

        }

    }

    Draw(ctx) {
         if(this.type=='Seal')
         {
            this.singedInfo.Draw(ctx);
         }else
         {
            console.log('数字签名 绘制 ');
         }
    }

}


