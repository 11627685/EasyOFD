

import Doc from "./Model/Doc.js"
import View from "./View/View.js" 

export default class EasyOFD {

    constructor(id, parent, x = 0, y = 0, width = 300, height = 150) {
        this.id = id;
        this.x = x; //开始X坐标像素，相对值
        this.y = y; //开始y坐标像素，相对值
        this.width = width; //宽度像素
        this.height = height; //高度像素
        this.parent = parent;
        this.WrapperCanvas(id, width, height);
        this.doc = new Doc();
        this.view = new View(this);
        this.SelectFile.bind(this);
        this.doc.$on('DocumentChange', this.DocumentChange.bind(this));
        this.canvasSelectFile.addEventListener('change', this.SelectFile.bind(this));
        // this.Draw();
    }
    WrapperCanvas(id, width, height) {
        this.rootdiv = document.createElement('div');
        this.rootdiv.tabindex = "0";
        this.rootdiv.id = id;
        this.rootdiv.setAttribute("style", "background-color: gray; align-items: center;display: flex;justify-content: center;padding: 40px;");
        this.canvas = document.createElement('canvas');
        this.rootdiv.appendChild(this.canvas);
        this.parent.appendChild(this.rootdiv);
        this.canvas.id = id + '-ofd-canvas';
        this.ctx = this.canvas.getContext('2d');
        let dpr = window.devicePixelRatio;
        let bsr = this.ctx['webkitBackingStorePixelRatio'] ||
            this.ctx['mozBackingStorePixelRatio'] ||
            this.ctx['msBackingStorePixelRatio'] ||
            this.ctx['oBackingStorePixelRatio'] ||
            this.ctx['backingStorePixelRatio'] || 1;
        let ratio = dpr / bsr;
        this.canvas.width = (parseInt(width) || document.documentElement.clientWidth) * ratio;
        this.canvas.height = (parseInt(height) || document.documentElement.clientHeight) * ratio;
        this.canvas.style.width = (parseInt(width) || document.documentElement.clientWidth) + 'px';
        this.canvas.style.height = (parseInt(height) || document.documentElement.clientHeight) + 'px';
        this.canvas.style.backgroundColor = 'white';
        //this.canvas.setAttribute("style", "background-color: white;");
        this.ctx.scale(ratio, ratio);
        this.WrapperPPI(id);
        this.WrapperSelectFile(id, this.rootdiv);
    }


    SetPhyViewZoom() {
        var element = document.getElementById(this.id);
        if (element) {
            element.remove();

        }
        let box = this.view.GetPagePhysicalBox();
        
        this.WrapperCanvas(this.id, this.ToPX(box.w), this.ToPX(box.h));
        if (element) {
           
            this.canvasSelectFile.addEventListener('change', this.SelectFile.bind(this));
        }

    }
    DocumentChange(doc) {
        console.log('Draw DocumentChange');
        this.SetPhyViewZoom();
        this.Draw()
    }
    Draw() //参数画图设备，此处为canvas
    {
        this.view.Draw(this.ctx);
        console.log('Draw');
    }

    WrapperPPI(id) {
        let divPPI = document.createElement('div');
        divPPI.id = id + '-ppi';
        divPPI.style = "width:1in;visible:hidden;padding:0px";
        this.rootdiv.appendChild(divPPI);
        this.ppi = document.getElementById(id + '-ppi').offsetWidth;
        this.canvas.ppi = this.ppi;
    }

    WrapperSelectFile(id, rootdiv) {
        this.canvasSelectFile = document.createElement('input');
        rootdiv.appendChild(this.canvasSelectFile);
        this.canvasSelectFile.id = id + '-ofd-selectfile';
        this.canvasSelectFile.type = 'file';
        this.canvasSelectFile.accept = '.ofd';
        //this.canvasSelectFile.style = 'display:none';
    }

    SelectFile(event) {
        try {
            let file = event.target.files[0]
            this.filename = file.name;
            console.log(this.filename);
            this.doc.read(file);
        } catch (e) {
            console.log(e);
        }
    }
    loadFromBlob(blob) {
        try {
            this.doc.read(blob);
        } catch (e) {
            console.log(e);
        }
    }

      /**
       * 所以1英寸=25.4毫米
       * @param {12.7 毫米 = 0.127 厘米 = 0.5 英寸 
                 12.7 毫米 = 0.5 英寸×96 像素/英寸 = 48 像素} x 
       */
  ToPX(v) {
    return parseFloat(parseFloat(v) / 25.4 * 96);
  }

}
